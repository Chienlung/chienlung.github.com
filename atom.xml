<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Programath]]></title>
  <link href="http://Chienlung.github.com/atom.xml" rel="self"/>
  <link href="http://Chienlung.github.com/"/>
  <updated>2013-08-21T10:49:27+08:00</updated>
  <id>http://Chienlung.github.com/</id>
  <author>
    <name><![CDATA[Chienlung]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C99中的restrict和volatile关键字]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/21/c99zhong-de-restricthe-volatileguan-jian-zi/"/>
    <updated>2013-08-21T09:34:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/21/c99zhong-de-restricthe-volatileguan-jian-zi</id>
    <content type="html"><![CDATA[<p>在看到restrict关键字之前，我只见过volatile关键字，因为平时几乎用不到，所以没有深究过。但是在看一些库代码或者内核代码时经常碰到。分别查过，今天简单总结一下。 <br/>
这俩词基本是对反义词，restrict意思是限定，volatile意思是不稳定的。都用来修饰变量，告诉编译器它们所修饰的变量的“物理性质”，即变量是否稳定，程序运行过程会不会发生变化。我这么说不是太准确，根据我看的资料，这俩关键字用的场景不同，但是确实跟“稳定性”有关，但不是一类稳定性。详细看下面，我理解有误请您务必斧正。但是我觉得出现这俩关键字的目的是为了避免编译器优化代码的副作用。</p>

<h2>volatile关键字   </h2>

<p>如果变量没有被volatile修饰，编译器分析完程序结构后可能会彻底把这个变量从某些代码段里给优化到消失！看下面从wikipedia抄来的例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bar</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">foo</span> <span class="o">!=</span> <span class="mi">255</span><span class="p">)</span>
</span><span class='line'>         <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具有优化功能的编译器分析完代码后觉得没有其它代码“可能”会改变存储在foo中的值，注意那个“可能”，编译器不是神，优化结果也许会出错。于是代码给优化成下面的样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">bar_optimized</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>         <span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是foo变量可能会被计算机的某些部件所改变，上面优化后的代码就无法检测到了，就会悲剧了。  <br/>
除了上面所说的，还有内存屏障即<a href="http://en.wikipedia.org/wiki/Memory_barrier">memory barrier</a> ，变量使用时会被从内存取出放入CPU的寄存器，以后使用的时候为了速度考虑不去内存读了，还是从寄存器取出来，但是并发环境下这个变量可能会被其它线程所改变，这时就必须去内存中读取，这种情况就必须要用volatile修饰，表明该变量不稳定，程序运行过程可能会改变，不要优化，每次乖乖去内存读。  <br/>
从上面也可以看出来，程序员使用这个关键字的时候必须要有充分的把握，不能乱用，否则会影响程序的执行效率。但是该用的时候不用又会影响程序的正确性。</p>

<h2>restrict关键字  </h2>

<p>这个关键字用来表明变量是各自独立的，这个保证需要程序员给予，继续看wikipedia的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">updatePtrs</span><span class="p">(</span><span class="kt">size_t</span> <span class="o">*</span><span class="n">ptrA</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="n">ptrB</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="n">ptrA</span> <span class="o">+=</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">ptrB</span> <span class="o">+=</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当你写出上面的代码后，编译器不清楚三个参数指针是不是指向同一个地方，所以不敢随便对它进行优化（对比下面优化代码就可也看出这里是怎么个不随便了），编译器老老实实按着逻辑来生成的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='s'><span class='line'>load R1 ← <span class="o">*</span>val  <span class="p">;</span> 加载val指向的值
</span><span class='line'>load R2 ← <span class="o">*</span>ptrA <span class="p">;</span> Load the value of ptrA pointer
</span><span class='line'>add  R2 <span class="o">+=</span> R1   <span class="p">;</span> Perform Addition
</span><span class='line'>set  R2 → <span class="o">*</span>ptrA <span class="p">;</span> Update the value of ptrA pointer
</span><span class='line'><span class="p">;</span> Similarly for ptrB<span class="p">,</span> note that val is loaded twice<span class="p">,</span>
</span><span class='line'><span class="p">;</span> because ptrA may be equal to val.
</span><span class='line'>load R1 ← <span class="o">*</span>val <span class="p">;</span>再次加载val指向的值
</span><span class='line'>load R2 ← <span class="o">*</span>ptrB
</span><span class='line'>add  R2 <span class="o">+=</span> R1
</span><span class='line'>set  R2 → <span class="o">*</span>ptrB
</span></code></pre></td></tr></table></div></figure>


<p>中间注释分开的上下两部分代码差不多，重点是val会被重复加载两次。因为程序员没说，编译器不敢确定val会不会跟ptrA或者ptrB指向相同的地方。如果指向相同的地方就必须重新载入，因为运算可能导致val指针指向的内容发生了变化。  <br/>
但是如果程序员能保证这仨指针会指向不同的地方，写出下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">updatePtrs</span><span class="p">(</span><span class="kt">size_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">ptrA</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">ptrB</span><span class="p">,</span> <span class="kt">size_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">val</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>既然程序员如此确定，保证这仨指针指向不同的地方，那么编译器就不客气了，生成如下优化代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='s'><span class='line'>load R1 ← <span class="o">*</span>val
</span><span class='line'>load R2 ← <span class="o">*</span>ptrA
</span><span class='line'>add  R2 <span class="o">+=</span> R1
</span><span class='line'>set  R2 → <span class="o">*</span>ptrA
</span><span class='line'><span class="p">;</span> 请注意下面，val不再会被重新载入了，
</span><span class='line'><span class="p">;</span> 因为编译器知道它不会被改变
</span><span class='line'>load R2 ← <span class="o">*</span>ptrB
</span><span class='line'>add  R2 <span class="o">+=</span> R1
</span><span class='line'>set  R2 → <span class="o">*</span>ptrB
</span></code></pre></td></tr></table></div></figure>


<p>这俩关键字的使用需要丰富的经验和对代码的整体把握。不能乱用。不确定的情况下使用volatile最多阻止优化拖慢程序运行速度，但是程序正确性不会被影响。如果没有百分百保证就不要用restrict了。 <br/>
总之，根据这俩关键字的性质，在不能百分之百肯定的情况下，最保守的做法是可以用volatile，但是不要用restrict。不知我这么理解对不对。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个用C语言实现的命令行英汉对照词典: MyDict]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/17/yong-cyu-yan-shi-xian-de-ming-ling-xing-ying-yi-dui-zhao-ci-dian-mydict/"/>
    <updated>2013-08-17T21:15:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/17/yong-cyu-yan-shi-xian-de-ming-ling-xing-ying-yi-dui-zhao-ci-dian-mydict</id>
    <content type="html"><![CDATA[<p>过去每次查单词都是打开google translate，中午吃完饭查单词，正好今天周末所以网速比平时更慢，google也更卡。于是想自己写个在命令行下使用的英汉词典，这样以后用VIM看源码或者看文档就可以借助tmux开个小窗口给这个命令行词典，想想就很方便。考虑到启动词典建立字典可能会话费比较多的时间，尤其当词库特别大的时候，语言当然用速度比较猛的C语言了。</p>

<p>先在网上下载了一个包含四万五千多词的词典，分成了好几个文件，光制作我要的原始词库就花了许多时间，文件本来是gbk编码，所以在我ubuntu上是乱码，先写了个bash文件用linux自带的iconv命令把这几个文件转码成utf8格式，然后自己又写了俩小程序把这些转码后的文件处理成一行单词一行中文含义的格式。就开始动手写主程序，调试乱七八糟的，还有修改了下输出。</p>

<p>运行起来迅速,只需0.145秒就可以建立词典，45093个中英对照占用内存73MB，改成无空桶的三向单词查找树应更加节省内存，后面找时间实现对比一下。</p>

<p>详细实现请见我的github吧，感兴趣请戳<a href="https://github.com/Chienlung/MyDict">MyDict</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地址空间和特权级别的仿生设计]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/08/di-zhi-kong-jian-he-te-quan-ji-bie-de-fang-sheng-she-ji/"/>
    <updated>2013-08-08T15:13:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/08/di-zhi-kong-jian-he-te-quan-ji-bie-de-fang-sheng-she-ji</id>
    <content type="html"><![CDATA[<p>在看内核相关到书，想到一些自己觉得挺有意思，但是不一定准确，记下来加深记忆。感觉人类设计的东西自觉不自觉地好像都是在模拟人类社会或者人体活动，这篇文章起的可能有点大也可能不准确，只是描述自己一个感觉。</p>

<h2>地址空间（食堂 = 厨房区域 + 非厨房区域）：</h2>

<p>linux针对每个进程，都会分配一个虚拟地址空间，这个空间由不同的架构决定，因为内存都是通过指针寻址，所以CPU的字长决定了地址空间的最大长度，比如常见的IA-32系统上虚拟地址空间为 $2<sup>32</sup> = 4GB$。（64位的系统不见得是$2<sup>64</sup> $ ，这个虚拟空间太大了，所以实际上使用的位数倾向于小于64位，比如42bit或者47bit。后面只说32bit的情况。）这个空间跟实际内存大小没关系，它是虚拟的。使用虚拟空间的另外一个理由是，让系统中每个进程都觉得自己是系统中唯一进程，让它感觉不到其它进程的存在。
这个4G 的虚拟空间也不全是给进程使用的，这个虚拟空间被划分为内核空间和用户空间。从0到TASK_SIZE是用户空间，这才是给用户进程用的；从TASK_SIZE到$2<sup>32</sup> $为内核空间，用户进程不能访问这一块儿。TASK_SIZE因架构不同而不同，在IA-32中，内核空间为1G，用户空间为3G。就像要盖食堂，先划出一块地来，然后再分成打菜炒菜的厨房区域和就餐的非厨房区域。</p>

<h2>特权级别（拿着碗要菜的学生，打菜的阿姨，炒菜的师傅，视察的领导。。。）：  </h2>

<p>内核把虚拟地址空间划分为两部分，可以保护各个系统进程。现代CPU架构都提供了几种特权级别，进程可以处于某一个特权级别。常见的IA-32架构提供了四种特权级别，从0-3，级别依次降低。但是linux只用了俩特权级别，一个叫核心态，一个叫用户态。这俩状态的关键差别在于对高于TASK_SIZE的虚拟地址空间区域的访问，也就是说用户态禁止访问这部分。就像一个你跑到学校食堂窗口对打菜的阿姨说，让我进你们后面厨房转转玩玩，阿姨肯定不让你进去，你要是进去不小心把什么东西打翻了弄坏了怎么办。本来食堂开始哪儿哪儿都差不多，后来划分出厨房区域和非厨房区域，然后根据这个区域划分定义了特权级别。这样，用户进程就不能操作或者读取内核空间的数据，也没法执行内核空间的代码。
但是如果用户进程想要执行任何影响整个系统的操作，比如想要从计算机的输入装置键盘获取字符，怎么办？只能借助系统调用向内核发出请求，比如scanf(&#8220;%c&#8221;, &amp;a)。就像你拿着个碗&#8217;a&#8217;跑到打菜的阿姨那说，阿姨，我想要个韭菜炒鸡蛋。阿姨接过碗&#8217;a&#8217;说，好，你等着，我去给你盛，“打菜阿姨”相当于内核的一部分，去“替”你执行“盛菜“这个动作，就像内核为用户进程到键盘获取“字符”，阿姨把菜放到你的碗里，就像内核把数据放到变量a中，这个过程中内核访问了用户空间即变量a。这就是进程上下文在用户态和内核态之间的切换。
除了代表用户进程执行代码以外，内核还可以由异步硬件中断激活，然后在中断上下文中运行，而且此时内核必须更加谨慎，比如不能进入睡眠状态。就像上面领导突然来食堂视察卫生状况，食堂负责卫生的相关人员就要陪着给领导解说，而且不能在陪领导视察的时候打盹儿，类似内核不能在中断上下文进入睡眠状态。<br/>
内核在中断上下文中运行与在进程上下文中运行的区别是，内核运行在中断上下文中时不能访问虚拟地址空间中的用户空间部分，就像突然来视察的领导不能去厨房外面摸正在吃饭的女学生。</p>

<h2>内核线程</h2>

<p>除了普通进程，系统中还有内核线程在运行，内核线程也不与任何特定的内核空间进程相关联，无权处理用户空间。就像，厨房的大师傅炒自己的菜，女学生在厨房外吃自己的饭，炒菜的大师傅不能去厨房外面摸人家女学生。与在中断上下文运转的内核相比，内核线程可以进入睡眠状态，也可以被调度器跟踪。就像领导来视察的时候，食堂的头头陪着就是了，炒菜的师傅还是照样炒菜，炒菜炒累了可以歇歇，也可以被他的上级领导指派去做别的，择个菜啥的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用python实现linux守护进程]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/06/yong-pythonshi-xian-linuxshou-hu-jin-cheng/"/>
    <updated>2013-08-06T19:47:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/06/yong-pythonshi-xian-linuxshou-hu-jin-cheng</id>
    <content type="html"><![CDATA[<p>昨天在微博看到<a href="http://www.vimer.cn/2010/08/%E7%94%A8python%E7%BC%96%E5%86%99linux%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.html">这篇文章</a>,然后又看到<a href="http://colding.bokee.com/5277082.html">这个稍微详细点的解释</a>。本着好记性不如烂键盘，就自己把整个代码敲了一遍。不知道是吸收的知识量越来越大了，还是自己记性不如以前了，一看知道怎么回事，写出来或者讲出来就费点劲，甚至有点哑口。一定要多实践！APUE也要赶紧再看一遍。  <br/>
这个程序我自己敲的时候，加了一些自己的理解，注释里更多的解释了一下原理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c">#coding:utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">time</span><span class="o">,</span> <span class="nn">atexit</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">signal</span> <span class="kn">import</span> <span class="n">SIGTERM</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Daemon</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">    通用Deamon类。</span>
</span><span class='line'><span class="sd">    用法：通过继承Deamon类，然后重写该类的_run()方法即可。</span>
</span><span class='line'><span class="sd">    &#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pidfile</span><span class="p">,</span> <span class="n">stdin</span> <span class="o">=</span> <span class="s">&#39;/dev/null&#39;</span><span class="p">,</span> <span class="n">stdout</span> <span class="o">=</span> <span class="s">&#39;/dev/null&#39;</span><span class="p">,</span> <span class="n">stderr</span> <span class="o">=</span> <span class="s">&#39;/dev/null&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span> <span class="o">=</span> <span class="n">pidfile</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stdin</span> <span class="o">=</span> <span class="n">stdin</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_daemonize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        进行double-fork magic，详见APUE</span>
</span><span class='line'><span class="sd">        http://colding.bokee.com/5277082.html</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        脱离父进程.</span>
</span><span class='line'><span class="sd">        为了避免被挂起，终止父进程，转到子进程后台中去运行</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">fork</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">pid</span><span class="p">:</span>
</span><span class='line'>                <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">OSError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;fork #1 </span><span class="si">%d</span><span class="s"> (</span><span class="si">%s</span><span class="s">)</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">errno</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">strerror</span><span class="p">))</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        脱离终端。</span>
</span><span class='line'><span class="sd">        自立山头: 建立自己的会话，建立自己的进程组，自己当会话的leader，自己当进程组的组长。</span>
</span><span class='line'><span class="sd">        由于会话过程对控制终端的独占性，创建新对话以后进程就与控制终端脱离了。 </span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">setsid</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        修改当前目录。</span>
</span><span class='line'><span class="sd">        进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        重新设置文件创建掩码。</span>
</span><span class='line'><span class="sd">        进程从创建它的父进程那里继承了文件创建掩模。</span>
</span><span class='line'><span class="sd">        它可能修改守护进程所创建的文件的存取位。为防止这一点，将文件创建掩模清除。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        第二次fork。</span>
</span><span class='line'><span class="sd">        进程已经成为无终端的会话组长，但它可以重新申请打开一个控制终端。</span>
</span><span class='line'><span class="sd">        可以通过使进程不再成为会话组长来禁止进程重新打开控制终端。</span>
</span><span class='line'><span class="sd">        进程杀死自己，让本会话失去leader，让本进程组失去组长，</span>
</span><span class='line'><span class="sd">        这样就不可能去申请新的终端了。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">fork</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">pid</span><span class="p">:</span>
</span><span class='line'>                <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">OSError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;fork #2 </span><span class="si">%d</span><span class="s"> (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">errno</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">strerror</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>
</span><span class='line'>        <span class="n">si</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">stdin</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">so</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&#39;a+&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">se</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#39;a+&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        重定向标准输入/输出/错误</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">si</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">so</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">dup2</span><span class="p">(</span><span class="n">se</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">fileno</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        注册程序退出时的函数，即删掉pidfile。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">atexit</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">delpid</span><span class="p">)</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        </span>
</span><span class='line'><span class="sd">        创建保存daemon进程pid的文件。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">pid</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())</span>
</span><span class='line'>        <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">,</span> <span class="s">&#39;w+&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">pid</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delpid</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        start the daemon</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        检查pidfile看看是否存在Daemon进程，防止重复启动同一个daemon进程</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pf</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>            <span class="n">pf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">pid</span><span class="p">:</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;pidfile </span><span class="si">%s</span><span class="s"> already exist. Daemon already running?</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">message</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">)</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        start Daemon进程</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_daemonize</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_run</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">stop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        stop Daemon进程</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        先检查要终止的daemon进程是否存在</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pf</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pf</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>            <span class="n">pf</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">IOError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">pid</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">pid</span><span class="p">:</span>
</span><span class='line'>            <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;pidfile </span><span class="si">%s</span><span class="s"> not exist. Daemon not running?</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">message</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        终止daemon进程</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>                <span class="n">os</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGTERM</span><span class="p">)</span>
</span><span class='line'>                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">OSError</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>            <span class="n">err</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">err</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;No such process&quot;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pidfile</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">restart</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        重启daemon进程</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">        当你继承Daemon类时，你应该重写这个方法。</span>
</span><span class='line'><span class="sd">        这个函数会在该进程daemonized后被调用。</span>
</span><span class='line'><span class="sd">        &#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyDaemon</span><span class="p">(</span><span class="n">Daemon</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">daemon</span> <span class="o">=</span> <span class="n">MyDaemon</span><span class="p">(</span><span class="s">&#39;/tmp/my-first-daemon-example.pid&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;start&#39;</span> <span class="o">==</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="k">elif</span> <span class="s">&#39;stop&#39;</span> <span class="o">==</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="n">stop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">elif</span> <span class="s">&#39;restart&#39;</span> <span class="o">==</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="n">restart</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;Unknown command&#39;</span>
</span><span class='line'>            <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;usage: </span><span class="si">%s</span><span class="s"> start|stop|restart&#39;</span> <span class="o">%</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[增强版插入排序---------希尔排序]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/06/xi-er-pai-xu/"/>
    <updated>2013-08-06T13:32:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/06/xi-er-pai-xu</id>
    <content type="html"><![CDATA[<p>希尔排序是插入排序的加强版，我们知道插入排序是一种自适应的排序算法，即如果待排序文件基本有序的话，插入排序的速度将会非常快。<br/>
插入排序在把一个元素插入到合适位置时，需要从右向左一个一个的进行比较，如果是最小元素，比较次数更多了。如果把待排序文件改造成基本有序，那么排序速度就会很快了！希尔排序就是在插入排序的外面加了一道工序，这道工序用来对待排序文件进行预处理，处理成从任意元素开始，每隔h个元素构成的序列是有序的，即h-有序的。经过这道工序，然后进行插入排序，速度就很快了。<br/>
看下代码容易理解：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">shellsort</span><span class="p">(</span><span class="n">Item</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/* 下面这个计算步长的方法是Knuth发明的，现在还没找到最好的步长计算方法 */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">h</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">/</span> <span class="mi">9</span><span class="p">;</span> <span class="n">h</span> <span class="o">=</span> <span class="n">h</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">h</span><span class="p">;</span> <span class="n">h</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">/=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="n">h</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="n">Item</span> <span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">less</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">h</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">h</span><span class="p">];</span>
</span><span class='line'>              <span class="n">j</span> <span class="o">-=</span> <span class="n">h</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本排序算法]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/05/ji-ben-pai-xu-suan-fa/"/>
    <updated>2013-08-05T11:58:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/05/ji-ben-pai-xu-suan-fa</id>
    <content type="html"><![CDATA[<p>这里总结的基本排序算法包括选择排序、插入排序、冒泡排序。<br/>
对于随机组合的n个数据进行排序时，这三个算法的时间复杂度与 $O(n<sup>2</sup> )$ 成正比，但是不要看不起这几个算法，对于小规模文件或者具有特殊结构（比如基本有序）的文件，这些算法比一些复杂算法的效率要高。这三个算法都不适合大型随机组合的文件，因为即使计算机运行速度非常快也是非常耗时的。下一篇文章要说的希尔排序算个例外，希尔排序的时间复杂度要低于 $O(n<sup>2</sup> )$ ，而是与 $O(n<sup>3/2</sup> )$ 成正比，适合中等大小的文件排序。</p>

<h2>选择排序</h2>

<p>我觉得这是一种最直觉的排序算法。首先，选出数组中的最小的元素，将它与数组中第一个元素进行交换；然后，选出次小的元素，将它与数组中的第二个元素进行交换。按照这个方法进行下去，直到整个数组排完序。<br/>
整个排序过程分成<strong>比较-交换</strong>两个大步骤。比较时，首先是从N个元素挑出最小值，需要比较N-1次；然后是从N-1个元素挑出次小值，需要比较N-2次&#8230;，所以可以算出比较次数为（N-1）+（N-2）+&#8230;+1 。交换时，每一次交换，都将一个元素放在了它最终的位置上，所以交换的次数为N-1（最后一个元素不需要交换）。所以整体看来，执行时间由比较次数决定。<br/>
后面可以看出尽管这三种基本排序算法的比较次数是一个数量级的 $ (O(n<sup>2</sup> )) $ ，但是选择排序的交换次数却是线性的，所以当数据项很大时由于交换操作会涉及大量复制，所以交换操作最少的选择排序是三者中最快的。<br/>
下面是选择排序的C语言代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">Item</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define key(A)  (A) </span><span class="cm">/* 取出项A的关键字（用于比较时用） */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define less(A, B) (key(A) &lt; key(B)) </span><span class="cm">/* A的关键字是否小于B的关键字 */</span><span class="cp"></span>
</span><span class='line'><span class="cp">#define exch(A, B) { Item t = A; A = B; B = t; } </span><span class="cm">/* 交换项A和项B */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">selection</span><span class="p">(</span><span class="n">Item</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">less</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">min</span><span class="p">]))</span> <span class="n">min</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>      <span class="n">exch</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">min</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">selection</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>插入排序</h2>

<p>插入排序类似与打扑克时的抽牌和排大小，一摞扑克放在那，轮到你时，你在里面抽一张，然后跟手里已经抽到的比较一下，把它放到合适的位置，然后继续。等到抽完牌了，手里到牌也排好序了。<br/>
先写个简单的插入排序算法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define compexch(A, B) if (less(B, A)) exch(A, B)</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">insert</span><span class="p">(</span><span class="n">Item</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="cm">/* 外层循环相当于抽牌 */</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">l</span><span class="p">;</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="cm">/* 内层循环相当于排大小 */</span>
</span><span class='line'>          <span class="n">compexch</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
上面这段代码可以优化。再想象抽牌排大小过程，抽到新牌后，跟手里已经抽到的牌从右向左比较，如果比新牌大就往右挪一个位置，然后跟下个比，直到比新牌小为止，再左边的就不用比了，也就是说可以跳出内层循环了。这个改进可以使插入排序变成一个适应性排序算法，当待排序的文件基本有序时，插入排序的时间可以接近线性时间，与之对比的是选择排序是非适应性的，不管待排序文件是否基本有序，时间复杂度都是二次的。另外，设置观察哨，可以将内层循环里的比较操作由两次变为一次。<br/>
改进后的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">insert</span><span class="p">(</span><span class="n">Item</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="cm">/* 把最小值换到起始位置当观察哨 */</span>
</span><span class='line'>      <span class="n">compexch</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="n">Item</span> <span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>          <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>冒泡排序</h2>

<p>冒泡排序实际上是一种选择排序，每次也是挑一个放到前面合适的位置，但是跟选择排序不同的是，每次挑选合适的元素时，会把后面的各个元素也大体排一下，所以在冒泡排序中，随着排序的进行，后面是越来越有序，而选择排序不会产生这种效果。<br/>
下面是C代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">bubble</span><span class="p">(</span><span class="n">Item</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>          <span class="n">compexch</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 2 - Linked Lists - IQ 2.5]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-5/"/>
    <updated>2013-08-04T13:49:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-5</id>
    <content type="html"><![CDATA[<p>Interview Question 2.5</p>

<p>题目：<br/>
ven a circular linked list, implement an algorithm which returns node at the begin-
ning of the loop.<br/>
DEFINITION<br/>
Circular linked list: A (corrupt) linked list in which a node’s next pointer points to an
earlier node, so as to make a loop in the linked list.<br/>
EXAMPLE<br/>
Input: A -> B -> C -> D -> E -> C [the same C as earlier]<br/>
Output: C<br/>
解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 2.5   Given a circular linked list, implement an algorithm</span>
</span><span class='line'><span class="cm"> * which returns node at the beginning of the loop.</span>
</span><span class='line'><span class="cm"> * DEFINITION</span>
</span><span class='line'><span class="cm"> * Circular linked list: A (corrupt) linked list in which</span>
</span><span class='line'><span class="cm"> * a node’s next pointer points to an earlier node, so as</span>
</span><span class='line'><span class="cm"> * to make a loop in the linked list.</span>
</span><span class='line'><span class="cm"> * EXAMPLE</span>
</span><span class='line'><span class="cm"> * Input: A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C [the same C as earlier]</span>
</span><span class='line'><span class="cm"> * Output: C</span>
</span><span class='line'><span class="cm"> * 中文：给一个循环链表 ，找出循环的开始节点。比如，给你个链表</span>
</span><span class='line'><span class="cm"> * A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C ，循环的开始位置即为C。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;malloc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 过去见过一个题目让判断一个链表是否有环，解决办法是设置一个快指针一个慢指针，</span>
</span><span class='line'><span class="cm"> * 一起从头节点开始遍历，慢指针每次前进一步，快指针每次前进两步，如果在这个过程</span>
</span><span class='line'><span class="cm"> * 中快指针和慢指针相遇，则说明有环儿。这个过程就像类似俩人在操场跑圈儿，一个人跑得</span>
</span><span class='line'><span class="cm"> * 快，一个人跑得慢，那个跑得快的肯定能追上跑得慢的即相遇。</span>
</span><span class='line'><span class="cm"> * 再来看这个题目，告诉你有环儿了，让你判断环开始的位置在哪。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 首先说，这又是一个计数问题，就像前面遇到到问题，给谁计数呢？</span>
</span><span class='line'><span class="cm"> * 当然是每个节点的地址了！从头开始遍历链表，第一个重复</span>
</span><span class='line'><span class="cm"> * 的地址即为环的开始位置！！由于地址可能都比较大，所以可以开大数组，但是数组太大估计</span>
</span><span class='line'><span class="cm"> * 开不了。只好自己实现一个hash表了，开链式的解决冲突。前面2.1题目自己实现过hash表了，</span>
</span><span class='line'><span class="cm"> * 这里这个不重复了。这里用bitmap来实现一下。（C++好歹还有个用红黑树实现的map。哼哼。。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 然后说，前面有个2.2题用相距n的俩指针寻找倒数第n个节点，这个其实跟那个2.2类似，</span>
</span><span class='line'><span class="cm"> * 快慢指针求出环的长度，接着再从头开始，用相距环长的俩指针遍历这个带环的链表，</span>
</span><span class='line'><span class="cm"> * 当俩指针相遇时，相遇的节点就是环的开始节点。求环的长度这样来做，快慢指针第一次相遇后，</span>
</span><span class='line'><span class="cm"> * 固定快指针，用慢指针继续遍历同时计数，等俩指针再次相遇时，就求出了环的长度。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">link_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">link_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">link_node</span><span class="o">*</span>
</span><span class='line'><span class="nf">process1</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">bm</span><span class="p">[</span><span class="mi">100000</span><span class="p">];</span><span class="cm">/* bitmap要开很大，地址大的把小伙伴们都吓尿了！ */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">bm</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">bm</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">head</span> <span class="o">/</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>      <span class="n">j</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">head</span> <span class="o">%</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">bm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">))</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">bm</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">|=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>      <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;process1: The beginning is %c (%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">link_node</span><span class="o">*</span>
</span><span class='line'><span class="nf">process2</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">fast</span><span class="p">,</span> <span class="o">*</span><span class="n">slow</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fast</span> <span class="o">=</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="n">slow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 固定fast，用slow继续遍历，求环长度 */</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="n">fast</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fast</span> <span class="o">=</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">cnt</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">slow</span> <span class="o">!=</span> <span class="n">fast</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;process2: The beginning is %c (%d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">slow</span><span class="o">-&gt;</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">slow</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">slow</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; C [the same C as earlier] */</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p1</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p1</span><span class="o">-&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;A&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p2</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p2</span><span class="o">-&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;B&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p3</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p3</span><span class="o">-&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;C&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p4</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p4</span><span class="o">-&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;D&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p5</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p5</span><span class="o">-&gt;</span><span class="n">c</span> <span class="o">=</span> <span class="sc">&#39;E&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">p1</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p2</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p3</span><span class="p">,</span> <span class="n">p3</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p4</span><span class="p">,</span> <span class="n">p4</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p5</span><span class="p">,</span> <span class="n">p5</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p3</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//process1(p1);</span>
</span><span class='line'>  <span class="n">process2</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 2 - Linked Lists - IQ 2.4]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-4/"/>
    <updated>2013-08-04T13:49:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-4</id>
    <content type="html"><![CDATA[<p>Interview Question 2.4<br/>
题目：<br/>
You have two numbers represented by a linked list, where each node contains a sin-
gle digit. The digits are stored in reverse order, such that the 1’s digit is at the head of
the list. Write a function that adds the two numbers and returns the sum as a linked
list.<br/>
EXAMPLE<br/>
Input: (3 -> 1 -> 5), (5 -> 9 -> 2)<br/>
Output: 8 -> 0 -> 8</p>

<p>解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 2.4   You have two numbers represented by a linked list,</span>
</span><span class='line'><span class="cm"> * where each node contains a sin-gle digit. The digits</span>
</span><span class='line'><span class="cm"> * are stored in reverse order, such that the 1’s digit is</span>
</span><span class='line'><span class="cm"> *  at the head of the list. Write a function that adds</span>
</span><span class='line'><span class="cm"> *  the two numbers and returns the sum as a linked list.</span>
</span><span class='line'><span class="cm"> *  EXAMPLE</span>
</span><span class='line'><span class="cm"> *  Input: (3 -&gt; 1 -&gt; 5), (5 -&gt; 9 -&gt; 2)</span>
</span><span class='line'><span class="cm"> *  Output: 8 -&gt; 0 -&gt; 8</span>
</span><span class='line'><span class="cm"> *  中文：两个单链表相加，每个node里面存一位，逆序存储，即个位存在头节点了，</span>
</span><span class='line'><span class="cm"> *  依次十位，百位，。。。。</span>
</span><span class='line'><span class="cm"> *  就是大整数加法，不过这里用的不是数组，是单链表。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;malloc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">link_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">link_node</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 思路很简单，因为是单链表，这里用递归实现。注意边界判别。</span>
</span><span class='line'><span class="cm"> * 原书代码出现了俩错误，真不应该。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="n">link_node</span> <span class="o">*</span>
</span><span class='line'><span class="nf">addlist</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">carry</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">carry</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">a</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">+=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>      <span class="n">carry</span> <span class="o">+=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">carry</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">addlist</span><span class="p">(</span><span class="n">a</span><span class="o">?</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">:</span><span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">b</span><span class="o">?</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">:</span><span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">carry</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span>
</span><span class='line'>                           <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">link_node</span><span class="o">*</span>
</span><span class='line'><span class="nf">init_link</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">srand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">30</span><span class="p">;</span><span class="cm">/* 链表长度也是随机出来的 */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>      <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 按正确顺序输出单链表。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">print_link</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="n">init_link</span><span class="p">();</span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="n">init_link</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">+</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">------------------------------------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">c</span> <span class="o">=</span> <span class="n">addlist</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 2 - Linked Lists - IQ 2.3]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-3/"/>
    <updated>2013-08-04T13:49:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-3</id>
    <content type="html"><![CDATA[<p>Interview Question 2.3</p>

<p>题目：<br/>
Implement an algorithm to delete a node in the middle of a single linked list, given
only access to that node.<br/>
EXAMPLE<br/>
Input: the node ‘c’ from the linked list a->b->c->d->e<br/>
Result: nothing is returned, but the new linked list looks like a->b->d->e<br/>
解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 2.3   Implement an algorithm to delete a node in the middle of a</span>
</span><span class='line'><span class="cm"> * single linked list, given only access to that node.</span>
</span><span class='line'><span class="cm"> * EXAMPLE</span>
</span><span class='line'><span class="cm"> * Input: the node ‘c’ from the linked list a-&gt;b-&gt;c-&gt;d-&gt;e</span>
</span><span class='line'><span class="cm"> * Result: nothing is returned, but the new linked list looks like a-&gt;b-&gt;d-&gt;e</span>
</span><span class='line'><span class="cm"> * 中文：实现一个算法删除单链表中的一个节点，你只能访问这个被删除的节点（就是</span>
</span><span class='line'><span class="cm"> * 头节点都不告诉你）。</span>
</span><span class='line'><span class="cm"> * 例子:</span>
</span><span class='line'><span class="cm"> * 输入： 要被删除的节点C，它来自单链表a-&gt;b-&gt;c-&gt;d-&gt;e</span>
</span><span class='line'><span class="cm"> * 输出： 什么也不返回，但是新的链表要看起来像这样：a-&gt;b-&gt;d-&gt;e</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 给你一个节点，你把它删除。因为没给头节点，也没给这个节点前一个节点，</span>
</span><span class='line'><span class="cm"> * 所以不能直接删除它，否则链表就会从中间断掉。怎么办呢？既然它前面的无法</span>
</span><span class='line'><span class="cm"> * 访问，但是通过next可以访问它后面的所有节点，那就把它后面节点中的数据</span>
</span><span class='line'><span class="cm"> * 依次拷贝到这个节点，修改下next指针，删除后面这个节点就好啦！每个节点就是</span>
</span><span class='line'><span class="cm"> * 个箱子，不同是因为里面装得东西不同，数据拷贝过来，删哪个都一样。</span>
</span><span class='line'><span class="cm"> * 当然这里面有边界条件需要考虑，</span>
</span><span class='line'><span class="cm"> * 就是如果要删除的是最后一个节点的话，就没法弄了，不能直接删了它，因为无法修改它</span>
</span><span class='line'><span class="cm"> * 前趋的next所以删了它也没用，无解。无解但是也要考虑到，</span>
</span><span class='line'><span class="cm"> * crackint the coding interview书里面让大家跟面试官讨论这个地方。</span>
</span><span class='line'><span class="cm"> * 这是一个很重要的考点。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">link_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">link_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">del_node</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">n</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 2 - Linked Lists - IQ 2.2]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-2/"/>
    <updated>2013-08-04T13:49:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-2</id>
    <content type="html"><![CDATA[<p>Interview Question 2.2</p>

<p>题目： <br/>
Implement an algorithm to find the nth to last element of a singly linked list.</p>

<p>解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 2.2   Implement an algorithm to find the nth to last element of a singly linked list.</span>
</span><span class='line'><span class="cm"> * 中文：实现一个算法，找出单链表中的倒数第n个元素。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">link_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">link_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 单链表不能倒着遍历，怎么办呢？用栈！从头开始挨个入栈，</span>
</span><span class='line'><span class="cm"> * 然后再挨个出栈，第n个出栈的就是我们要找的元素。其实也不一定非要用显示栈，</span>
</span><span class='line'><span class="cm"> * 可以用递归这个隐式栈来实现。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">process1</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">head</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">process1</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;process1: The nth to last element is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 还有一个比较巧的办法是用俩距离为n的指针，从头开始向后移动，</span>
</span><span class='line'><span class="cm"> * 当走在前面到指针t恰好指向NULL的时候，走在后面的指针f所指即为所求。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">process2</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t</span> <span class="o">=</span> <span class="n">f</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">f</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;process2: The nth to last element is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">init_link</span><span class="p">(</span><span class="n">link_node</span> <span class="o">**</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">};</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>      <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">print_link</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>      <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">init_link</span><span class="p">(</span><span class="o">&amp;</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">process1</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>      <span class="n">process2</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 2 - Linked Lists - IQ 2.1]]></title>
    <link href="http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-1/"/>
    <updated>2013-08-04T13:49:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/08/04/cracking-the-coding-interview-chapter-2-Linked-Lists-iq-2-dot-1</id>
    <content type="html"><![CDATA[<p>Interview Question 2.1</p>

<p>题目：</p>

<p>Write code to remove duplicates from an unsorted linked list.<br/>
FOLLOW UP<br/>
How would you solve this problem if a temporary buffer is not allowed?</p>

<p>解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 2.1   Write code to remove duplicates from an unsorted linked list.</span>
</span><span class='line'><span class="cm"> * FOLLOW UP</span>
</span><span class='line'><span class="cm"> * How would you solve this problem if a temporary buffer is not allowed?</span>
</span><span class='line'><span class="cm"> * 中文：删除未排序链表中的重复节点。</span>
</span><span class='line'><span class="cm"> * 还有，</span>
</span><span class='line'><span class="cm"> * 不允许临时缓冲区你该怎么办？</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;malloc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">link_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">link_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">link_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 这题本质还是计数问题，去重嘛！如果允许开一个缓冲区可以用hash，遍历一个判断一下是否在</span>
</span><span class='line'><span class="cm"> * hash里面，如果没有则加入，如果在里面则删除。稍微费劲的是需要自己实现一个hashmap，</span>
</span><span class='line'><span class="cm"> * 不能直接用以链表存储的数值为索引的数组，因为数值可能为负数。多占了空间，时间复杂度</span>
</span><span class='line'><span class="cm"> * 相应就可以降低，为O（n）。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 表长为素数</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define M 4093</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 开链法实现</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">hash_node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hash_value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">hash_node</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">hash_node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">hash_node</span> <span class="n">st</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">hash</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">?</span><span class="p">((</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="n">M</span><span class="o">:</span><span class="n">data</span> <span class="o">%</span> <span class="n">M</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">st_contain</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hash_node</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">h</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">hash_value</span> <span class="o">==</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">st_add</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hash_node</span> <span class="o">*</span><span class="n">new_node</span> <span class="o">=</span> <span class="p">(</span><span class="n">hash_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">hash_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">new_node</span><span class="o">-&gt;</span><span class="n">hash_value</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">new_node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">st</span><span class="p">[</span><span class="n">h</span><span class="p">].</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">st</span><span class="p">[</span><span class="n">h</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">del_dup1</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">pre</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">cur</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">st_contain</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>          <span class="n">free</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cur</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">st_add</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>          <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
</span><span class='line'>          <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 如果不让用缓冲区的话，那就用俩指针，一个p指针从头开始慢慢悠悠，</span>
</span><span class='line'><span class="cm"> * 一个q指针快速遍历去找是否有跟p指向重复的数据。时间复杂度为O(n*n)。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">del_dup2</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">,</span> <span class="o">*</span><span class="n">pre</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">pre</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">q</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">==</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>              <span class="n">free</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span><span class='line'>              <span class="n">q</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">pre</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>              <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">init_link</span><span class="p">(</span><span class="n">link_node</span> <span class="o">**</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="n">link_node</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">link_node</span><span class="p">));</span>
</span><span class='line'>      <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>      <span class="n">p</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">print_link</span><span class="p">(</span><span class="n">link_node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">head</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>      <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">link_node</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init_link</span><span class="p">(</span><span class="o">&amp;</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">st</span><span class="p">));</span>
</span><span class='line'>  <span class="n">del_dup1</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;del_dup1: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">init_link</span><span class="p">(</span><span class="o">&amp;</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">st</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">st</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;del_dup2: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">del_dup2</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>  <span class="n">print_link</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.8]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-8/"/>
    <updated>2013-07-17T18:42:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-8</id>
    <content type="html"><![CDATA[<p>Interview Question 1.8</p>

<p>题目：</p>

<p>Assume you have a method isSubstring which checks if one word is a substring of
another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using
only one call to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”).</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.8   Assume you have a method isSubstring which checks</span>
</span><span class='line'><span class="cm"> * if one word is a substring of another. Given two strings, s1 and s2,</span>
</span><span class='line'><span class="cm"> * write code to check if s2 is a rotation of s1 using only one call</span>
</span><span class='line'><span class="cm"> * to isSubstring (i.e., “waterbottle” is a rotation of “erbottlewat”).</span>
</span><span class='line'><span class="cm"> * 中文：假设你现在已经有了一个用于判断一个字符串是否是另一个字符串的isSubstring函数。</span>
</span><span class='line'><span class="cm"> * 给你俩字符串s1和s2，请你写个代码，在仅仅调用一次isSubstring函数的前提下，</span>
</span><span class='line'><span class="cm"> * 判断s2是否为s1的旋转（比如，“waterbottle” 就是 “erbottlewat” 的一个</span>
</span><span class='line'><span class="cm"> * 旋转，“waterbottle”循环左移两个字符得到）。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Cracking the Coding Interview里的代码是用大java实现的。</span>
</span><span class='line'><span class="cm"> * C语言没有判断子串的函数，那只好自己先写一个啦。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">isSubstring</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len_s1</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len_s2</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len_s2</span> <span class="o">&gt;</span> <span class="n">len_s1</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len_s1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len_s2</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len_s1</span> <span class="o">&amp;&amp;</span> <span class="n">s2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">len_s2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 现在来看最重要的地方。</span>
</span><span class='line'><span class="cm"> * 这个题如果不看题目限制，直觉上会这么做，首先比较俩字符串长度是否相等，</span>
</span><span class='line'><span class="cm"> * 不相等的话s2不可能是s1的旋转；如果长度相等，那么就将s2每次向左旋转一个字符，</span>
</span><span class='line'><span class="cm"> * 然后判断跟s1是否相等，如果相等，那么s2就是s1的旋转，否则继续直到s2旋转本身长度次数，</span>
</span><span class='line'><span class="cm"> * 即又变回到自己。但是这种做法会调用n次isSubstring函数，而不是题目要求的一次。</span>
</span><span class='line'><span class="cm"> * 那该怎么做呢？这里用到一个技巧（编程之美 里面好像也提到过），就是把两个s1直接拼接起来，</span>
</span><span class='line'><span class="cm"> * 即s1s1，然后调用isSubstring判断s2是否为s1s1的子串，如果是的话，那么s2就是s1的一个</span>
</span><span class='line'><span class="cm"> * 旋转。设s1长度为n，那么s1s1就相当于把s1旋转n次，但是每次旋转的时候保留原串不变，而是在左移时</span>
</span><span class='line'><span class="cm"> * 复制出去。比如在保留原串不变的前提下，将apple向左移动一个字符的结果就是applea。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">is_rotation</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len_s1</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len_s2</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">s1s1</span><span class="p">[</span><span class="mi">400</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len_s1</span> <span class="o">!=</span> <span class="n">len_s2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;NO</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">s1s1</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">s1s1</span> <span class="o">+</span> <span class="n">len_s1</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">isSubstring</span><span class="p">(</span><span class="n">s1s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span><span class="o">?</span><span class="s">&quot;YES&quot;</span><span class="o">:</span><span class="s">&quot;NO&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">agrv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">s1</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">s2</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s%s&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">is_rotation</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">apple</span>
</span><span class='line'><span class="cm">pleap</span>
</span><span class='line'><span class="cm">YES</span>
</span><span class='line'>
</span><span class='line'><span class="cm">apple</span>
</span><span class='line'><span class="cm">ppale</span>
</span><span class='line'><span class="cm">NO</span>
</span><span class='line'>
</span><span class='line'><span class="cm">waterbottle</span>
</span><span class='line'><span class="cm">erbottlewat</span>
</span><span class='line'><span class="cm">YES</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.7]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-7/"/>
    <updated>2013-07-17T18:42:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-7</id>
    <content type="html"><![CDATA[<p>Interview Question 1.7</p>

<p>题目：</p>

<p>Write an algorithm such that if an element in an MxN matrix is 0, its entire row and
column is set to 0.</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.7   Write an algorithm such that if an element</span>
</span><span class='line'><span class="cm"> * in an MxN matrix is 0,</span>
</span><span class='line'><span class="cm"> * its entire row and column is set to 0.</span>
</span><span class='line'><span class="cm"> * 中文：如果一个M*N的矩阵中某个元素为0，那么写一个算法把这个元素所在的行</span>
</span><span class='line'><span class="cm"> * 和列全部置为0。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#define M 4</span>
</span><span class='line'><span class="cp">#define N 3</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 很直观的一个想法就是遍历这个矩阵，然后遇到0的时候把它所在的行和列全部置为0，</span>
</span><span class='line'><span class="cm"> * 可惜这么做不对，因为如果这么做会有可能导致整个矩阵变成0矩阵。因为我们接下来可能</span>
</span><span class='line'><span class="cm"> * 会遍历到被我们置为0的元素。</span>
</span><span class='line'><span class="cm"> * 可以这么做，设置俩数组，一个数组row长度为M，一个数组column长度为N，遍历矩阵的时候如果[i][j]为0，</span>
</span><span class='line'><span class="cm"> * 则把row[i]和column[j]都置为1，第二次遍历的时候检查相应的row[i]和column[j]，设置为1的都置为0.</span>
</span><span class='line'><span class="cm"> * 详见代码。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">rm_zero</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)[</span><span class="n">N</span><span class="p">],</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">row</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">column</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">row</span><span class="p">));</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">column</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">column</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>              <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>              <span class="n">column</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">||</span> <span class="n">column</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">M</span><span class="p">][</span><span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span> <span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">}};</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="n">rm_zero</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.6]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-6/"/>
    <updated>2013-07-17T18:41:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-6</id>
    <content type="html"><![CDATA[<p>Interview Question 1.6</p>

<p>题目：</p>

<p>Given an image represented by an NxN matrix, where each pixel in the image is 4
bytes, write a method to rotate the image by 90 degrees. Can you do this in place?</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.6   Given an image represented by an NxN matrix,</span>
</span><span class='line'><span class="cm"> * where each pixel in the image is 4 bytes, write</span>
</span><span class='line'><span class="cm"> * a method to rotate the image by 90 degrees. Can you do this in place?</span>
</span><span class='line'><span class="cm"> *  中文：给出一个用N*N矩阵表示的图片，每个像素是四个字节，请你写一个</span>
</span><span class='line'><span class="cm"> *  函数来把这个图片旋转90度，而且是在原地进行旋转。</span>
</span><span class='line'><span class="cm"> * 如果你想想不出来图片旋转90度以后是什么样子，你可以打开你所用OS中</span>
</span><span class='line'><span class="cm"> * 的图片查看器，打开一个照片点击旋转按钮看下效果。</span>
</span><span class='line'><span class="cm"> * 题目没说是顺时针旋转还是逆时针旋转，这俩方向差不多，我们按顺时针来做。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 这个题目的旋转有点意思。我们把矩阵从外向里分成若干层，一层一层</span>
</span><span class='line'><span class="cm"> * 跟扒皮似的进行旋转操作，每一层分成四个边即top,right,bottom,left。</span>
</span><span class='line'><span class="cm"> * 针对每一层，保存top边还未被旋转的最左端的那个像素，然后把left边应该占这个</span>
</span><span class='line'><span class="cm"> * 位置的像素放到这里，现在left有个位置就空出来了，然后把bottom边与这个位置对应</span>
</span><span class='line'><span class="cm"> * 的像素放到这里，然后bottom边有个位置空出来了，然后把right边与之对应的像素放到这里，</span>
</span><span class='line'><span class="cm"> * 然后right边空出一个位置，最后把开始保存的top边的那个像素放到这里。</span>
</span><span class='line'><span class="cm"> * 然后重复上面到步骤，直到每一层所有边的像素都旋转完毕。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define N 6</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">print_matrix</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">m</span><span class="p">)[</span><span class="n">N</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%2d &quot;</span><span class="p">,</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">rotate</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">m</span><span class="p">)[</span><span class="n">N</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">layers_num</span> <span class="o">=</span> <span class="n">N</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span><span class="c1">//总层数</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">layer</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">layer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">layer</span> <span class="o">&lt;</span> <span class="n">layers_num</span><span class="p">;</span> <span class="n">layer</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">layer</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">tmp</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">layer</span><span class="p">][</span><span class="n">i</span><span class="p">];</span><span class="c1">//保存top边在处理的像素</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">layer</span><span class="p">;</span>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * left -&gt; top</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">m</span><span class="p">[</span><span class="n">layer</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">)</span> <span class="o">-</span> <span class="n">j</span><span class="p">][</span><span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * bottom -&gt; left</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">m</span><span class="p">[(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">)</span> <span class="o">-</span> <span class="n">j</span><span class="p">][</span><span class="n">layer</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span> <span class="o">-</span> <span class="n">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * right -&gt; bottom</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">m</span><span class="p">[</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span> <span class="o">-</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/*</span>
</span><span class='line'><span class="cm">          * top -&gt; right</span>
</span><span class='line'><span class="cm">          */</span>
</span><span class='line'>          <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">layer</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print_matrix</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">m</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">print_matrix</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>  <span class="n">rotate</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.5]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-5/"/>
    <updated>2013-07-17T18:41:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-5</id>
    <content type="html"><![CDATA[<p>Interview Question 1.5</p>

<p>题目：</p>

<p>Write a method to replace all spaces in a string with ‘%20’.</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.5 Write a method to replace all spaces in a string with ‘%20’.</span>
</span><span class='line'><span class="cm"> * 中文：写一个函数把一个字符串中所有的空格替换为&#39;%20&#39;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 分两步：1.先遍历一遍字符串，遍历时对空格计数cnt_sp。</span>
</span><span class='line'><span class="cm"> * 2.根据原串长度和空格个数来计算新串长度，</span>
</span><span class='line'><span class="cm"> * 即原串长度（包含最后的&#39;\0&#39;） + cnt_sp * 2,</span>
</span><span class='line'><span class="cm"> * 根据新串长度来分配空间，然后从后向前遍历旧串，如果是空格就替换为</span>
</span><span class='line'><span class="cm"> * &#39;0&#39; &#39;2&#39; &#39;%&#39;，否这直接拷贝。如果原串长度够的话就不用自己分配空间了。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">replace_sp</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//注意最后的&#39;\0&#39;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">new_len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">cnt_sp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="sc">&#39; &#39;</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">])</span>
</span><span class='line'>          <span class="n">cnt_sp</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_len</span> <span class="o">=</span> <span class="n">len</span> <span class="o">+</span> <span class="n">cnt_sp</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * 我们假设str原串空间够长</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">len</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39; &#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">str</span><span class="p">[</span><span class="o">--</span><span class="n">new_len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str</span><span class="p">[</span><span class="o">--</span><span class="n">new_len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;2&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">str</span><span class="p">[</span><span class="o">--</span><span class="n">new_len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;%&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">str</span><span class="p">[</span><span class="o">--</span><span class="n">new_len</span><span class="p">]</span> <span class="o">=</span> <span class="n">str</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
</span><span class='line'>      <span class="n">len</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;new: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">200</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">gets</span><span class="p">(</span><span class="n">str</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">replace_sp</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.4]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-4/"/>
    <updated>2013-07-17T18:41:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/17/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-4</id>
    <content type="html"><![CDATA[<p>Interview Question 1.4</p>

<p>题目：</p>

<p>Write a method to decide if two strings are anagrams or not.</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.4   Write a method to decide if two strings are anagrams or not.</span>
</span><span class='line'><span class="cm"> * 中文：写一个函数来判断两个字符串是否互为变位词（指变换某个词或短语的字母顺序构成的新词或短语）。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 是否互为变为词，这个蛮好判断，如果两个字符串长度相等，每个排下序，比较一下是否相等就知道了。</span>
</span><span class='line'><span class="cm"> * 相等的话就互为变为词。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">swap</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * 这个用到了异或操作进行交换，有人说</span>
</span><span class='line'><span class="cm">  * 这两个值必须不同，否则会置为0.</span>
</span><span class='line'><span class="cm">  * 呵呵，不会哒！放心好了！</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">^=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">b</span> <span class="o">^=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">^=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span>
</span><span class='line'><span class="nf">partition</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">high</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span><span class="c1">//判断j &gt;= 0,是防止key是最小的字符</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="o">--</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="n">low</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="o">++</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">key</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="o">+</span> <span class="n">j</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">swap</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="o">+</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">qsort</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&gt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">pivot</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">pivot</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">pivot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">anagrams_check</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="o">!=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;NO</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="n">s2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//printf(&quot;%s %s\n&quot;, s1, s2);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span><span class="o">?</span><span class="s">&quot;NO&quot;</span><span class="o">:</span><span class="s">&quot;YES&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">s1</span><span class="p">[</span><span class="mi">100</span><span class="p">],</span> <span class="n">s2</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s%s&quot;</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">anagrams_check</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poj 1008 Maya Calendar AC代码]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/16/poj-1008-maya-calendar-acdai-ma/"/>
    <updated>2013-07-16T23:46:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/16/poj-1008-maya-calendar-acdai-ma</id>
    <content type="html"><![CDATA[<p>这个题很简单，但是我觉得有点恶心，心里情不自禁想到玛雅人消失肯定有原因，搞特么俩日历，还特么这么麻烦。在根据月份的名字去查找对应的号码时如果想提升效率可以事先建立一个字典，然后每次直接按字符串进行查询即可，时间复杂度O（1），字典可以用哈希来来实现，哈希值的计算可以用霍纳法则来算，但是有个恶心的地方就是建立字典的时候要手动输入每个月份及其对应的号码。最后实现的时候我没这么做，一个是月份不多，另一个是这些月份的前缀相同的字母是极少，所以即使用strcmp也会非常快。还有一个恶心的地方就是第二种日历中，每一天对应的号码数是从1到13，算得时候反正恶心着我了。下面是代码，关键地方都有注释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 查询Haab日历某个月份对应的号码</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">haab_mon</span><span class="p">[</span><span class="mi">19</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;pop&quot;</span><span class="p">,</span> <span class="s">&quot;no&quot;</span><span class="p">,</span> <span class="s">&quot;zip&quot;</span><span class="p">,</span> <span class="s">&quot;zotz&quot;</span><span class="p">,</span> <span class="s">&quot;tzec&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;xul&quot;</span><span class="p">,</span> <span class="s">&quot;yoxkin&quot;</span><span class="p">,</span><span class="s">&quot;mol&quot;</span><span class="p">,</span> <span class="s">&quot;chen&quot;</span><span class="p">,</span> <span class="s">&quot;yax&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;zac&quot;</span><span class="p">,</span> <span class="s">&quot;ceh&quot;</span><span class="p">,</span> <span class="s">&quot;mac&quot;</span><span class="p">,</span> <span class="s">&quot;kankin&quot;</span><span class="p">,</span> <span class="s">&quot;muan&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;pax&quot;</span><span class="p">,</span> <span class="s">&quot;koyab&quot;</span><span class="p">,</span> <span class="s">&quot;cumhu&quot;</span><span class="p">,</span><span class="s">&quot;uayet&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">tz_day</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;imix&quot;</span><span class="p">,</span> <span class="s">&quot;ik&quot;</span><span class="p">,</span> <span class="s">&quot;akbal&quot;</span><span class="p">,</span> <span class="s">&quot;kan&quot;</span><span class="p">,</span> <span class="s">&quot;chicchan&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;cimi&quot;</span><span class="p">,</span> <span class="s">&quot;manik&quot;</span><span class="p">,</span> <span class="s">&quot;lamat&quot;</span><span class="p">,</span><span class="s">&quot;muluk&quot;</span><span class="p">,</span> <span class="s">&quot;ok&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;chuen&quot;</span><span class="p">,</span> <span class="s">&quot;eb&quot;</span><span class="p">,</span> <span class="s">&quot;ben&quot;</span><span class="p">,</span> <span class="s">&quot;ix&quot;</span><span class="p">,</span> <span class="s">&quot;mem&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;cib&quot;</span><span class="p">,</span> <span class="s">&quot;caban&quot;</span><span class="p">,</span> <span class="s">&quot;eznab&quot;</span><span class="p">,</span> <span class="s">&quot;canac&quot;</span><span class="p">,</span> <span class="s">&quot;ahau&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span>
</span><span class='line'><span class="nf">cal</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">day</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mon</span><span class="p">,</span> <span class="kt">int</span> <span class="n">year</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">d</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sum_days</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">day</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">d</span> <span class="o">*=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>      <span class="n">d</span> <span class="o">+=</span> <span class="n">day</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">m</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="mi">19</span><span class="p">;</span> <span class="n">m</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">mon</span><span class="p">,</span><span class="n">haab_mon</span><span class="p">[</span><span class="n">m</span><span class="p">]))</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * 算出haab历中这一天是从世界开始后的第几天，最小为0</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">sum_days</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="n">m</span> <span class="o">*</span> <span class="mi">20</span> <span class="o">+</span> <span class="n">year</span> <span class="o">*</span> <span class="mi">365</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Tzolkin历每年只有13 * 20 = 260天</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">year</span> <span class="o">=</span> <span class="n">sum_days</span> <span class="o">/</span> <span class="mi">260</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Tzolkin历每个period有20天,name为这一天名字的下标</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="n">sum_days</span> <span class="o">%</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Tzolkin历每13天循环计数,num为这一天对应的号码，最小为1.</span>
</span><span class='line'><span class="cm">  * 老是算不对这个数！</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum_days</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">13</span><span class="p">;</span><span class="cm">/* sum_days + 1为世界形成共多少天了。*/</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">?</span><span class="n">num</span><span class="o">:</span><span class="mi">13</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %s %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">tz_day</span><span class="p">[</span><span class="n">name</span><span class="p">],</span> <span class="n">year</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">day</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">mon</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">year</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s%s%d&quot;</span><span class="p">,</span> <span class="n">day</span><span class="p">,</span> <span class="n">mon</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">year</span><span class="p">);</span>
</span><span class='line'>          <span class="n">cal</span><span class="p">(</span><span class="n">day</span><span class="p">,</span> <span class="n">mon</span><span class="p">,</span> <span class="n">year</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[poj 1007 DNA Sorting AC代码]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/16/poj-1007-dna-sorting-acdai-ma/"/>
    <updated>2013-07-16T23:02:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/16/poj-1007-dna-sorting-acdai-ma</id>
    <content type="html"><![CDATA[<p>题目其实就是让求每个字符串的逆序数，然后将字符串按逆序数从小到达排序输出。求逆序数最先想到的就是归并排序，在通过比较合并两个子数组时顺道计算逆序数。当然具体针对这个题目，求逆序数还有更简单的方法，因为字符串只由四种字母构成，具体可以看poj这道题的disguss，大家都有讨论。计算出逆序数以后把逆序数作为排序关键字进行排序，因为是字符串，所以要避免复制字符串，用字符串的起始地址作为代表就好了。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">51</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">num_of_inversions</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">index_of_b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="n">a</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">b</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="mi">51</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">merge</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">low</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">high</span> <span class="o">-</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>              <span class="n">cnt</span> <span class="o">+=</span> <span class="n">mid</span> <span class="o">-</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span><span class="c1">//求逆序数，前半个数组中比a[k]大的数的总数</span>
</span><span class='line'>              <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>              <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">mid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>          <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">low</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">mergesort</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">low</span><span class="p">,</span> <span class="kt">int</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">((</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">low</span> <span class="o">&gt;=</span> <span class="n">high</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mergesort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mergesort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'>  <span class="n">merge</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">high</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">dna</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="mi">1226</span><span class="p">];</span><span class="c1">//计数，用于计数排序。最大逆序数为49 + 48 + 。。。 + 1 + 0 = （49 + 0） * 25 =  1225</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span><span class="c1">//d中保存按逆序数从小到大排序后b[[]中字符串的下标</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">c</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//cnt用于记录每个字符串的逆序数</span>
</span><span class='line'>      <span class="n">mergesort</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">str</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span><span class="c1">//归并排序求逆序数，结果保存在变量cnt中</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num_of_inversions</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
</span><span class='line'>      <span class="n">c</span><span class="p">[</span><span class="n">cnt</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">1225</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span><span class="c1">//计算不大于i的数有多少个，这一步为了计算i在d中的下标</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">d</span><span class="p">[</span><span class="o">--</span><span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num_of_inversions</span><span class="p">]]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">index_of_b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">strcpy</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">str</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">num_of_inversions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">index_of_b</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">dna</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.3]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/16/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-3/"/>
    <updated>2013-07-16T00:20:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/16/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-3</id>
    <content type="html"><![CDATA[<p>Interview Question 1.3</p>

<p>题目：</p>

<p>Design an algorithm and write code to remove the duplicate characters in a string
without using any additional buffer. NOTE: One or two additional variables are fine.
An extra copy of the array is not.
FOLLOW UP
Write the test cases for this method.</p>

<p>解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.3    Design an algorithm and write code to remove the duplicate characters in a string</span>
</span><span class='line'><span class="cm"> * without using any additional buffer. NOTE: One or two additional variables are fine.</span>
</span><span class='line'><span class="cm"> * An extra copy of the array is not.</span>
</span><span class='line'><span class="cm"> * FOLLOW UP</span>
</span><span class='line'><span class="cm"> * Write the test cases for this method.</span>
</span><span class='line'><span class="cm"> * 中文：设计算法并且写出代码来移除一个字符串重的重复字符，不能用额外的缓冲区。</span>
</span><span class='line'><span class="cm"> * 注意：一个或者两个额外变量还是可以用滴。</span>
</span><span class='line'><span class="cm"> * 不允许额外的数组拷贝（也就是原地进行操作啦，不能再开个数组拷贝这些数据）。</span>
</span><span class='line'><span class="cm"> * 还有,</span>
</span><span class='line'><span class="cm"> * 请你给出几个测试用例。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 题目说不能用任何额外的缓冲区，到底具体是什么意思，面试的时候可以具体跟面试官交流下，</span>
</span><span class='line'><span class="cm"> * 是不是只要不开个太大的数组就行了。</span>
</span><span class='line'><span class="cm"> * 这个题目跟前面题目1.1很像，重复判断本质我觉得就是计数问题，所以开个索引数组，</span>
</span><span class='line'><span class="cm"> * 为了省空间可以用bitmap;移除字符就跟1.2相像了，很直观的想法是一个指针从开头向后遍历，</span>
</span><span class='line'><span class="cm"> * 如果遇到已经出现过的字符需要把后面的字符串整体向前移动一个位置，</span>
</span><span class='line'><span class="cm"> * 然后不停的重复直到字符串尾部，这个移动过程类似插入排序的移动动作，时间复杂度O（n^2）.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">remove_dup</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">a</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">q</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="o">*</span><span class="n">q</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>              <span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">a</span><span class="p">[</span><span class="o">*</span><span class="n">q</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">q</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//memset(str, 0, sizeof(str));</span>
</span><span class='line'>      <span class="n">remove_dup</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Test Cases:</span>
</span><span class='line'><span class="cm"> * 1.     String does not contain any duplicates, e.g.: abcd</span>
</span><span class='line'><span class="cm"> * 2.     String contains all duplicates, e.g.: aaaa</span>
</span><span class='line'><span class="cm"> * 3.     Null string</span>
</span><span class='line'><span class="cm"> * 4.     String with all continuous duplicates, e.g.: aaabbb</span>
</span><span class='line'><span class="cm"> * 5.    String with non-contiguous duplicate, e.g.: abababa</span>
</span><span class='line'><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cracking the Coding Interview - Chapter 1 - Arrays and Strings - IQ 1.2]]></title>
    <link href="http://Chienlung.github.com/blog/2013/07/16/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-2/"/>
    <updated>2013-07-16T00:17:00+08:00</updated>
    <id>http://Chienlung.github.com/blog/2013/07/16/cracking-the-coding-interview-chapter-1-arrays-and-strings-iq-1-dot-2</id>
    <content type="html"><![CDATA[<p>Interview Question 1.2</p>

<p>题目：</p>

<p>Write code to reverse a C-Style String. (C-String means that “abcd” is represented as five characters, including the null character.)</p>

<p>解题思路与代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 1.2    Write code to reverse a C-Style String.</span>
</span><span class='line'><span class="cm"> * (C-String means that “abcd” is represented as five characters,</span>
</span><span class='line'><span class="cm"> * including the null character.)</span>
</span><span class='line'><span class="cm"> * 中文：写代码来逆转一个C风格的字符串。所谓的C风格就是指最后以空字符&#39;\0&#39;结束的字符串。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 很直观的念头就是俩指针，一个指向头，一个指向尾，同时向中间移动一个位置，移动前交换所指向的字符。</span>
</span><span class='line'><span class="cm"> * 注意C风格的字符串最后是空字符，不要动它，应该只逆转它前面的所有字符。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">swap</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span> <span class="o">^</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">reverse_cstr</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="p">(</span><span class="n">len</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">swap</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>
</span><span class='line'>      <span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">q</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result : %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">reverse_cstr</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
